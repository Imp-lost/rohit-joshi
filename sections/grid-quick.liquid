{% comment %}
  Product Grid Section with Quick View
{% endcomment %}

<div class="product-grid-section" data-section-id="{{ section.id }}">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Lustria:wght@400&display=swap');

    .product-grid-container {
      max-width: 1200x;
      margin: 0 auto;
      padding: 20px;
    }

    .section-heading {
      text-align: left;
      margin-bottom: 20px;
    }

    .heading-text {
      font-family: Lustria, serif;
      font-weight: 400;
      font-style: normal;
      font-size: 36px;
      line-height: 120%;
      letter-spacing: 0px;
      vertical-align: middle;
      margin: 0 0 10px 0;
      color: #333;
    }

    .subheading-text {
      font-size: 1.1rem;
      color: #666;
      margin: 0;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
      line-height: 1.6;
    }

    @media (max-width: 768px) {
      .heading-text {
        font-size: 24px;
      }
      
      .subheading-text {
        font-size: 1rem;
      }
      
      .section-heading {
        margin-bottom: 20px;
      }
    }

    .product-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
      margin-bottom: 40px;
      max-width: 1200x;
    }

    @media (max-width: 768px) {
      .product-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
      }
    }

    .product-item {
      position: relative;
      overflow: hidden;
      cursor: pointer;
      {% comment %} transition: transform 0.3s ease; {% endcomment %}
      aspect-ratio: 1 / 1;
    }

    {% comment %} .product-item:hover {
      transform: translateY(-5px);
    } {% endcomment %}

    .product-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .product-overlay {
      position: absolute;
      top: 15px;
      right: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1;
    }

    .quick-view-btn {
      background: transparent;
      border: none;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: transform 0.2s ease;
      padding: 5px;
    }

    .quick-view-btn:hover {
      transform: scale(1.1);
    }

    .quick-view-btn img {
      width: 24px;
      height: 24px;
    }

    /* Quick View Modal */
    .quick-view-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }

    .quick-view-modal.active {
      display: flex;
    }

    .modal-content {
      background: white;
      border-radius: 12px;
      max-width: 500px;
      width: 90%;
      max-height: 90vh;
      overflow-y: auto;
      position: relative;
    }

    .modal-header {
      position: relative;
      padding: 0;
    }

    .modal-product-image {
      width: 100%;
      height: 300px;
      object-fit: cover;
      border-radius: 12px 12px 0 0;
    }

    .close-modal {
      position: absolute;
      top: 15px;
      right: 15px;
      background: rgba(255, 255, 255, 0.9);
      border: none;
      width: 35px;
      height: 35px;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 18px;
    }

    .modal-body {
      padding: 25px;
    }

    .modal-product-title {
      font-size: 24px;
      font-weight: bold;
      margin: 0 0 10px 0;
      color: #333;
    }

    .modal-product-price {
      font-size: 20px;
      font-weight: 600;
      color: #000;
      margin-bottom: 15px;
    }

    .modal-product-description {
      color: #666;
      line-height: 1.6;
      margin-bottom: 25px;
    }

    .variant-group {
      margin-bottom: 20px;
    }

    .variant-label {
      font-weight: 600;
      margin-bottom: 10px;
      display: block;
      color: #333;
    }

    .variant-options {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .variant-option {
      padding: 8px 16px;
      border: 2px solid #ddd;
      border-radius: 6px;
      background: white;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 14px;
    }

    .variant-option:hover {
      border-color: #333;
    }

    .variant-option.selected {
      background: #333;
      color: white;
      border-color: #333;
    }

    .size-dropdown {
      width: 100%;
      padding: 12px;
      border: 2px solid #ddd;
      border-radius: 6px;
      font-size: 16px;
      background: white;
      cursor: pointer;
    }

    .size-dropdown:focus {
      outline: none;
      border-color: #333;
    }

    .add-to-cart-btn {
      width: 100%;
      background: #000;
      color: white;
      border: none;
      padding: 15px;
      font-size: 16px;
      font-weight: 600;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.2s ease;
      margin-top: 20px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .add-to-cart-btn:hover {
      background: #333;
    }

    .add-to-cart-btn:disabled {
      background: #ccc;
      cursor: not-allowed;
    }

    .loading {
      opacity: 0.7;
      cursor: wait;
    }
  </style>

  <div class="product-grid-container">
    {% if section.settings.heading != blank %}
      <div class="section-heading">
        <h2 class="heading-text">{{ section.settings.heading }}</h2>
        {% if section.settings.subheading != blank %}
          <p class="subheading-text">{{ section.settings.subheading }}</p>
        {% endif %}
      </div>
    {% endif %}
    
    <div class="product-grid">
      {% for product in section.settings.collection.products limit: 6 %}
        <div class="product-item" data-product-id="{{ product.id }}">
          <img 
            src="{{ product.featured_image | image_url: width: 400 }}" 
            alt="{{ product.title }}"
            class="product-image"
            width="400"
            height="400"
            loading="lazy"
          >
          <div class="product-overlay">
            <button class="quick-view-btn" onclick="openQuickView({{ product.id }})">
              <img src="{{ 'openmodal.svg' | asset_url }}" alt="Quick View" width="24" height="24">
            </button>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>

  <!-- Quick View Modal -->
  <div id="quickViewModal" class="quick-view-modal">
    <div class="modal-content">
      <div class="modal-header">
        <img id="modalImage" src="" alt="" class="modal-product-image" width="500" height="300">
        <button class="close-modal" onclick="closeQuickView()">Ã—</button>
      </div>
      <div class="modal-body">
        <h2 id="modalTitle" class="modal-product-title"></h2>
        <div id="modalPrice" class="modal-product-price"></div>
        <div id="modalDescription" class="modal-product-description"></div>
        
        <form id="addToCartForm">
          <div id="variantOptions"></div>
          <button type="submit" class="add-to-cart-btn" id="addToCartBtn">
            <span>ADD TO CART</span>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="m9 18 6-6-6-6"/>
            </svg>
          </button>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Product data storage
    const productData = {};
    
    {% for product in section.settings.collection.products limit: 9 %}
      productData[{{ product.id }}] = {
        id: {{ product.id }},
        title: {{ product.title | json }},
        price: {{ product.price | json }},
        comparePrice: {{ product.compare_at_price | json }},
        description: {{ product.description | strip_html | json }},
        image: {{ product.featured_image | image_url: width: 500 | json }},
        variants: [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              title: {{ variant.title | json }},
              price: {{ variant.price | json }},
              available: {{ variant.available | json }},
              option1: {{ variant.option1 | json }},
              option2: {{ variant.option2 | json }},
              option3: {{ variant.option3 | json }}
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ],
        options: [
          {% for option in product.options_with_values %}
            {
              name: {{ option.name | json }},
              position: {{ option.position }},
              values: {{ option.values | json }}
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ]
      };
    {% endfor %}

    let currentProduct = null;
    let selectedVariant = null;

    function openQuickView(productId) {
      currentProduct = productData[productId];
      if (!currentProduct) return;

      // Populate modal content
      const modalImage = document.getElementById('modalImage');
      modalImage.src = currentProduct.image;
      modalImage.alt = currentProduct.title;
      modalImage.setAttribute('width', '500');
      modalImage.setAttribute('height', '500');
      document.getElementById('modalTitle').textContent = currentProduct.title;
      document.getElementById('modalDescription').textContent = currentProduct.description;
      
      // Set initial variant and price
      selectedVariant = currentProduct.variants[0];
      updatePrice();
      
      // Build variant options
      buildVariantOptions();
      
      // Show modal
      document.getElementById('quickViewModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    function closeQuickView() {
      document.getElementById('quickViewModal').classList.remove('active');
      document.body.style.overflow = '';
      currentProduct = null;
      selectedVariant = null;
    }

    function updatePrice() {
      const priceElement = document.getElementById('modalPrice');
      if (selectedVariant) {
        priceElement.textContent = formatMoney(selectedVariant.price);
      } else {
        priceElement.textContent = formatMoney(currentProduct.price);
      }
    }

    function buildVariantOptions() {
      const container = document.getElementById('variantOptions');
      container.innerHTML = '';

      if (!currentProduct.options || currentProduct.options.length === 0) return;

      currentProduct.options.forEach((option, index) => {
        const variantGroup = document.createElement('div');
        variantGroup.className = 'variant-group';
        
        const label = document.createElement('label');
        label.className = 'variant-label';
        label.textContent = option.name;
        variantGroup.appendChild(label);

        if (option.name.toLowerCase() === 'size') {
          // Create dropdown for size
          const select = document.createElement('select');
          select.className = 'size-dropdown';
          select.addEventListener('change', (e) => updateVariant(index, e.target.value));
          
          const defaultOption = document.createElement('option');
          defaultOption.value = '';
          defaultOption.textContent = 'Choose your size';
          select.appendChild(defaultOption);
          
          option.values.forEach(value => {
            const optionElement = document.createElement('option');
            optionElement.value = value;
            optionElement.textContent = value;
            select.appendChild(optionElement);
          });
          
          variantGroup.appendChild(select);
        } else {
          // Create buttons for other options
          const optionsContainer = document.createElement('div');
          optionsContainer.className = 'variant-options';
          
          option.values.forEach(value => {
            const button = document.createElement('button');
            button.type = 'button';
            button.className = 'variant-option';
            button.textContent = value;
            button.addEventListener('click', () => {
              // Remove selected class from siblings
              optionsContainer.querySelectorAll('.variant-option').forEach(btn => {
                btn.classList.remove('selected');
              });
              // Add selected class to clicked button
              button.classList.add('selected');
              updateVariant(index, value);
            });
            
            // Select first option by default
            if (value === option.values[0]) {
              button.classList.add('selected');
            }
            
            optionsContainer.appendChild(button);
          });
          
          variantGroup.appendChild(optionsContainer);
        }
        
        container.appendChild(variantGroup);
      });
    }

    function updateVariant(optionIndex, value) {
      // Get current selections
      const selections = [];
      currentProduct.options.forEach((option, index) => {
        if (index === optionIndex) {
          selections[index] = value;
        } else if (option.name.toLowerCase() === 'size') {
          const select = document.querySelector('.size-dropdown');
          selections[index] = select.value;
        } else {
          const selected = document.querySelector(`#variantOptions .variant-group:nth-child(${index + 1}) .variant-option.selected`);
          selections[index] = selected ? selected.textContent : option.values[0];
        }
      });

      // Find matching variant
      selectedVariant = currentProduct.variants.find(variant => {
        return selections.every((selection, index) => {
          const variantOption = variant[`option${index + 1}`];
          return !selection || variantOption === selection;
        });
      });

      if (!selectedVariant) {
        selectedVariant = currentProduct.variants[0];
      }

      updatePrice();
      updateAddToCartButton();
    }

    function updateAddToCartButton() {
      const button = document.getElementById('addToCartBtn');
      if (selectedVariant && selectedVariant.available) {
        button.disabled = false;
        button.querySelector('span').textContent = 'ADD TO CART';
      } else {
        button.disabled = true;
        button.querySelector('span').textContent = 'SOLD OUT';
      }
    }

    function formatMoney(cents) {
      return (cents / 100).toFixed(2) + 'â‚¬';
    }

    // Add to cart functionality
    document.getElementById('addToCartForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!selectedVariant || !selectedVariant.available) return;

      const button = document.getElementById('addToCartBtn');
      const originalText = button.querySelector('span').textContent;
      
      // Show loading state
      button.classList.add('loading');
      button.querySelector('span').textContent = 'ADDING...';
      button.disabled = true;

      try {
        // Add main product to cart
        await addToCart(selectedVariant.id, 1);
        
        // Check if we need to add the "Soft Winter Jacket" automatically
        const needsJacket = checkForAutomaticJacket();
        if (needsJacket) {
          await addSoftWinterJacket();
        }
        
        button.querySelector('span').textContent = 'ADDED!';
        setTimeout(() => {
          closeQuickView();
        }, 1000);
        
      } catch (error) {
        console.error('Error adding to cart:', error);
        button.querySelector('span').textContent = 'ERROR';
        setTimeout(() => {
          button.querySelector('span').textContent = originalText;
          button.disabled = false;
        }, 2000);
      } finally {
        button.classList.remove('loading');
      }
    });

    function checkForAutomaticJacket() {
      // Check if selected variant has Black color and Medium size
      const hasBlack = selectedVariant.option1 === 'Black' || selectedVariant.option2 === 'Black' || selectedVariant.option3 === 'Black';
      const hasMedium = selectedVariant.option1 === 'Medium' || selectedVariant.option2 === 'Medium' || selectedVariant.option3 === 'Medium';
      
      return hasBlack && hasMedium;
    }

    async function addSoftWinterJacket() {
      // You'll need to replace this with the actual variant ID of the "Soft Winter Jacket"
      // This is a placeholder - you should set this to the correct variant ID
      const jacketVariantId = 'YOUR_JACKET_VARIANT_ID_HERE';
      
      try {
        await addToCart(jacketVariantId, 1);
        console.log('Soft Winter Jacket added automatically');
      } catch (error) {
        console.error('Failed to add Soft Winter Jacket:', error);
      }
    }

    async function addToCart(variantId, quantity) {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: variantId,
          quantity: quantity
        })
      });

      if (!response.ok) {
        throw new Error('Failed to add to cart');
      }

      return response.json();
    }

    // Close modal when clicking outside
    document.getElementById('quickViewModal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeQuickView();
      }
    });

    // Close modal with escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        closeQuickView();
      }
    });
  </script>
</div>

{% schema %}
{
  "name": "Quick View",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Section Heading",
      "default": "Featured Products"
    },
    {
      "type": "textarea",
      "id": "subheading",
      "label": "Section Subheading",
      "info": "Optional description text below the heading"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection",
      "info": "Select the collection to display products from"
    }
  ],
  "presets": [
    {
      "name": "Product Grid with Quick View",
      "settings": {
        "heading": "Featured Products",
        "subheading": "Discover our curated selection of premium products"
      }
    }
  ]
}
{% endschema %}