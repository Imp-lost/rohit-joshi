{% comment %}
  Product Grid Section with Quick View - Fixed Dropdown Hover
{% endcomment %}

<div class="product-grid-section" data-section-id="{{ section.id }}">
  <style>
@import url('https://fonts.googleapis.com/css2?family=Lustria:wght@400&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Jost:wght@300;400;500;600&display=swap');

.product-grid-container {
  max-width: 1300px;
  margin: 0 auto;
  padding: 20px;
}

.section-heading {
  text-align: left;
  margin-bottom: 20px;
}

.heading-text {
  font-family: Lustria, serif;
  font-weight: 400;
  font-style: normal;
  font-size: 36px;
  line-height: 120%;
  letter-spacing: 0px;
  vertical-align: middle;
  margin: 0 0 10px 0;
  color: #333;
}

.subheading-text {
  font-size: 1.1rem;
  color: #666;
  margin: 0;
  max-width: 600px;
  line-height: 1.6;
}

@media (max-width: 768px) {
  .heading-text {
    font-size: 24px;
  }
  
  .subheading-text {
    font-size: 1rem;
  }
  
  .section-heading {
    margin-bottom: 20px;
    text-align: center;
  }
}

.product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
  margin-bottom: 40px;
}

@media (max-width: 768px) {
  .product-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 4px;
  }
}

.product-item {
  position: relative;
  overflow: hidden;
  cursor: pointer;
  aspect-ratio: 1 / 1;
}

.product-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

/* Default position for all buttons */
.product-overlay {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;
}

/* Product 1: Top-right corner (default) */
.product-item:nth-child(1) .product-overlay {
  top: 170px;
  right: 105px;
}

/* Product 2: Center of image */
.product-item:nth-child(2) .product-overlay {
  top: 150px;
  right: 35px;
}

/* Product 3: Bottom-right corner */
.product-item:nth-child(3) .product-overlay {
  top: 40px;
  right: 75px;
}

/* Product 4: Bottom-left corner */
.product-item:nth-child(4) .product-overlay {
 top: 40px;
  right: 100px;
}

/* Product 5: Top-left corner */
.product-item:nth-child(5) .product-overlay {
  top: 65px;
  left: 140px;
}

/* Product 6: Bottom-center */
.product-item:nth-child(6) .product-overlay {
  top: 110px;
  right: 60px;
}

/* Mobile responsive adjustments */
@media (max-width: 768px) {
  .product-item:nth-child(1) .product-overlay {
    top: 80px;
    right: 49px;
  }

  .product-item:nth-child(2) .product-overlay {
     top: 65px;
    right: 20px;
  }

  .product-item:nth-child(3) .product-overlay {
    bottom: 10px;
    right: 10px;
  }

  .product-item:nth-child(4) .product-overlay {
    bottom: 10px;
    left: 10px;
  }

  .product-item:nth-child(5) .product-overlay {
    top: 10px;
    left: 10px;
  }

  .product-item:nth-child(6) .product-overlay {
    bottom: 10px;
    left: 50%;
    transform: translateX(-50%);
  }
}

.quick-view-btn {
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.2s ease;
  padding: 8px;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  background: none;
}

.quick-view-btn img {
  width: 20px;
  height: 20px;
}

/* Quick View Modal */
.quick-view-modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 9999;
  align-items: center;
  justify-content: center;
  padding: 20px;
  box-sizing: border-box;
}

.quick-view-modal.active {
  display: flex;
}

.modal-content {
  background: white;
  border-radius: 0;
  max-width: 350px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
  overflow-x: hidden;
  position: relative;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  scrollbar-width: none;
  -ms-overflow-style: none;
  font-family: 'Jost', sans-serif;
}

.modal-header {
  position: relative;
  padding: 25px;
  display: flex;
  gap: 13px;
  align-items: flex-start;
  margin-bottom: -20px;
  margin-top: 10px;
}

.modal-product-image {
  width: 120px;
  height: 140px;
  object-fit: cover;
  display: block;
  flex-shrink: 0;
}

.modal-info {
  flex: 1;
  min-width: 0;
}

.close-modal {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  width: 36px;
  height: 36px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;
  transition: transform 0.2s ease;
  padding: 8px;
}

.close-modal img {
  width: 20px;
  height: 20px;
  transform: rotate(45deg);
}

.modal-product-title {
  font-size: 16px;
  font-weight: 500;
  margin: 0 0 8px 0;
  color: #333;
  line-height: 1.3;
  font-family: 'Jost', sans-serif;
}

.modal-product-price {
  font-size: 16px;
  font-weight: 600;
  color: #000;
  margin-bottom: 8px;
  font-family: 'Jost', sans-serif;
}

.modal-product-description {
  color: #666;
  line-height: 1.5;
  font-size: 14px;
  display: -webkit-box;
  -webkit-line-clamp: 4;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  font-family: 'Jost', sans-serif;
}

.modal-body {
  padding: 0 24px 30px 24px;
}

.variant-group {
  margin-bottom: 8px;
}

.variant-label {
  font-weight: 500;
  margin-bottom: 8px;
  display: block;
  color: #333;
  font-size: 14px;
  font-family: 'Jost', sans-serif;
}

.variant-options {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 0;
  border: 1px solid #ddd;
}

.variant-option {
  padding: 12px 16px;
  border: none;
  background: white;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 14px;
  text-align: left;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 8px;
  font-family: 'Jost', sans-serif;
}

.variant-option:not(:last-child) {
  border-right: 1px solid #ddd;
}

.variant-option:hover {
  background: #f5f5f5;
}

.variant-option.selected {
  background: #000;
  color: white;
}

.variant-color-dot {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 4px;
  height: 100%;
  border-radius: 0;
  display: block;
  border: none;
}

.variant-option.selected .variant-color-dot {
  border-color: white;
}

/* Custom Size Dropdown Styles - FIXED */
.size-dropdown-container {
  position: relative;
  width: 100%;
}

.size-dropdown-button {
  width: 100%;
  padding: 12px 16px;
  border: 1px solid #ddd;
  background: white;
  cursor: pointer;
  font-size: 14px;
  font-family: 'Jost', sans-serif;
  color: #333;
  display: flex;
  align-items: center;
  justify-content: space-between;
  transition: all 0.2s ease;
}

.size-dropdown-button:hover {
  border-color: #333;
}

.size-dropdown-container.open .size-dropdown-button {
  border-color: #000;
}

.dropdown-arrow {
  transition: transform 0.2s ease;
}

.size-dropdown-container.open .dropdown-arrow {
  transform: rotate(180deg);
}

.size-dropdown-options {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border: 1px solid #ddd;
  border-top: none;
  max-height: 120px;
  overflow-y: auto;
  z-index: 1000;
  display: none;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  box-sizing: border-box;
  scrollbar-width: none;
  -ms-overflow-style: none;
}

.size-dropdown-options::-webkit-scrollbar {
  display: none;
}

/* Ensure dropdown doesn't exceed modal boundaries */
.modal-content .size-dropdown-options {
  max-height: min(120px, 30vh);
}

.size-dropdown-container.open .size-dropdown-options {
  display: block;
}

.size-option {
  width: 100%;
  padding: 12px 16px;
  border: none;
  background: white;
  cursor: pointer;
  font-size: 14px;
  font-family: 'Jost', sans-serif;
  text-align: left;
  transition: background 0.2s ease;
  border-bottom: 1px solid #f0f0f0;
  color: #333;
  white-space: nowrap;
}

.size-option:last-child {
  border-bottom: none;
}

/* Only show hover effect, no permanent selection styling */
.size-option:hover {
  background: #000;
  color: white;
}

/* Remove the selected class styling for size options */
.size-option.selected {
  background: white;
  color: #333;
}

.add-to-cart-btn {
  width: 100%;
  background: #000;
  color: white;
  border: none;
  padding: 14px 24px;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: background 0.2s ease;
  margin-top: 24px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  letter-spacing: 0.5px;
  font-family: 'Jost', sans-serif;
}

.add-to-cart-btn:disabled {
  background: #ccc;
  cursor: not-allowed;
}

.loading {
  opacity: 0.7;
  cursor: wait;
}

@media (max-width: 768px) {
  .modal-content {
    max-width: 95%;
    max-height: 95vh;
  }
  
  .modal-header {
    display: flex;
    gap: 15px;
    align-items: flex-start;
    padding: 20px;
    margin-top: 5px;
  }
  
  .modal-product-image {
    width: 100px;
    height: 120px;
    flex-shrink: 0;
    object-fit: cover;
  }
  
  .modal-info {
    flex: 1;
    min-width: 0;
  }
  
  .modal-product-title {
    font-size: 14px;
  }
  
  .modal-product-price {
    font-size: 14px;
  }
  
  .modal-product-description {
    font-size: 13px;
  }
  
  .modal-body {
    padding: 0 20px 25px 20px;
  }
  
  .variant-option {
    padding: 10px 12px;
    font-size: 13px;
  }
  
  .add-to-cart-btn {
    padding: 12px 20px;
    font-size: 13px;
  }
  
  .size-dropdown-options {
    max-height: 100px;
  }
  
  .modal-content .size-dropdown-options {
    max-height: min(100px, 25vh);
  }
}
  </style>

  <div class="product-grid-container">
    {% if section.settings.heading != blank %}
      <div class="section-heading">
        <h2 class="heading-text">{{ section.settings.heading }}</h2>
        {% if section.settings.subheading != blank %}
          <p class="subheading-text">{{ section.settings.subheading }}</p>
        {% endif %}
      </div>
    {% endif %}
    
    <div class="product-grid">
      {% for product in section.settings.collection.products limit: 6 %}
        <div class="product-item" data-product-id="{{ product.id }}">
          <img 
            src="{{ product.featured_image | image_url: width: 400 }}" 
            alt="{{ product.title }}"
            class="product-image"
            width="400"
            height="400"
            loading="lazy"
          >
          <div class="product-overlay">
            <button class="quick-view-btn" onclick="openQuickView({{ product.id }})">
              <img src="{{ 'openmodal.svg' | asset_url }}" alt="Quick View" width="24" height="24">
            </button>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>

  <!-- Quick View Modal -->
  <div id="quickViewModal" class="quick-view-modal">
    <div class="modal-content">
      <button class="close-modal" onclick="closeQuickView()">
        <img src="{{ 'openmodal.svg' | asset_url }}" alt="Close" width="20" height="20">
      </button>
      
      <div class="modal-header">
        <img id="modalImage" class="modal-product-image" width="120" height="140">
        <div class="modal-info">
          <h2 id="modalTitle" class="modal-product-title"></h2>
          <div id="modalPrice" class="modal-product-price"></div>
          <div id="modalDescription" class="modal-product-description"></div>
        </div>
      </div>
      
      <div class="modal-body">
        <form id="addToCartForm">
          <div id="variantOptions"></div>
          <button type="submit" class="add-to-cart-btn" id="addToCartBtn">
            <span>ADD TO CART</span>
            <img src="{{ 'arrow-modal.svg' | asset_url }}" alt="Arrow" width="16" height="16">
          </button>
        </form>
      </div>
    </div>
  </div>

 <script>
    // Product data storage
    const productData = {};
    
    {% for product in section.settings.collection.products limit: 9 %}
      productData[{{ product.id }}] = {
        id: {{ product.id }},
        title: {{ product.title | json }},
        price: {{ product.price | json }},
        comparePrice: {{ product.compare_at_price | json }},
        description: {{ product.description | strip_html | json }},
        image: {{ product.featured_image | image_url: width: 500 | json }},
        variants: [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              title: {{ variant.title | json }},
              price: {{ variant.price | json }},
              available: {{ variant.available | json }},
              option1: {{ variant.option1 | json }},
              option2: {{ variant.option2 | json }},
              option3: {{ variant.option3 | json }}
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ],
        options: [
          {% for option in product.options_with_values %}
            {
              name: {{ option.name | json }},
              position: {{ option.position }},
              values: {{ option.values | json }}
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ]
      };
    {% endfor %}

    let currentProduct = null;
    let selectedVariant = null;

    // Enhanced color mapping
    const colorMap = {
      'Black': '#000000', 'White': '#FFFFFF', 'Blue': '#0066CC', 'Red': '#CC0000',
      'Green': '#00CC00', 'Yellow': '#FFFF00', 'Purple': '#6600CC', 'Pink': '#FF69B4',
      'Orange': '#FF6600', 'Brown': '#8B4513', 'Gray': '#808080', 'Grey': '#808080',
      'Navy': '#000080', 'Light Blue': '#87CEEB', 'Dark Blue': '#00008B',
      'Light Green': '#90EE90', 'Dark Green': '#006400', 'Forest Green': '#228B22',
      'Light Gray': '#D3D3D3', 'Dark Gray': '#A9A9A9', 'Silver': '#C0C0C0',
      'Burgundy': '#800020', 'Maroon': '#800000', 'Crimson': '#DC143C',
      'Beige': '#F5F5DC', 'Cream': '#FFFDD0', 'Ivory': '#FFFFF0', 'Tan': '#D2B48C'
    };

    function getVariantColor(colorValue) {
      if (colorMap[colorValue]) return colorMap[colorValue];
      
      const exactMatch = Object.keys(colorMap).find(
        key => key.toLowerCase() === colorValue.toLowerCase()
      );
      if (exactMatch) return colorMap[exactMatch];
      
      const partialMatch = Object.keys(colorMap).find(
        key => colorValue.toLowerCase().includes(key.toLowerCase()) || 
               key.toLowerCase().includes(colorValue.toLowerCase())
      );
      if (partialMatch) return colorMap[partialMatch];
      
      return generateColorFromString(colorValue);
    }

    function generateColorFromString(str) {
      let hash = 0;
      for (let i = 0; i < str.length; i++) {
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
      }
      const r = Math.max(50, (hash & 0xFF0000) >> 16);
      const g = Math.max(50, (hash & 0x00FF00) >> 8);
      const b = Math.max(50, hash & 0x0000FF);
      return `rgb(${r}, ${g}, ${b})`;
    }

    function openQuickView(productId) {
      currentProduct = productData[productId];
      if (!currentProduct) return;

      const modalImage = document.getElementById('modalImage');
      modalImage.src = currentProduct.image;
      modalImage.alt = currentProduct.title;
      
      document.getElementById('modalTitle').textContent = currentProduct.title;
      document.getElementById('modalDescription').textContent = currentProduct.description;
      
      selectedVariant = currentProduct.variants[0];
      updatePrice();
      buildVariantOptions();
      
      document.getElementById('quickViewModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    function closeQuickView() {
      document.getElementById('quickViewModal').classList.remove('active');
      document.body.style.overflow = '';
      currentProduct = null;
      selectedVariant = null;
    }

    function updatePrice() {
      const priceElement = document.getElementById('modalPrice');
      if (selectedVariant) {
        priceElement.textContent = formatMoney(selectedVariant.price);
      } else {
        priceElement.textContent = formatMoney(currentProduct.price);
      }
    }

    function buildVariantOptions() {
      const container = document.getElementById('variantOptions');
      container.innerHTML = '';

      if (!currentProduct.options || currentProduct.options.length === 0) return;

      const sortedOptions = [...currentProduct.options].sort((a, b) => {
        const aName = a.name.toLowerCase();
        const bName = b.name.toLowerCase();
        
        if (aName === 'color' || aName === 'colour') return -1;
        if (bName === 'color' || bName === 'colour') return 1;
        if (aName === 'size') return 1;
        if (bName === 'size') return -1;
        
        return a.position - b.position;
      });

      sortedOptions.forEach((option, sortedIndex) => {
        const originalIndex = currentProduct.options.findIndex(opt => opt.name === option.name);
        
        const variantGroup = document.createElement('div');
        variantGroup.className = 'variant-group';
        
        const label = document.createElement('label');
        label.className = 'variant-label';
        label.textContent = option.name;
        variantGroup.appendChild(label);

        if (option.name.toLowerCase() === 'size') {
          // Create custom dropdown for size
          const dropdownContainer = document.createElement('div');
          dropdownContainer.className = 'size-dropdown-container';
          
          const dropdownButton = document.createElement('button');
          dropdownButton.type = 'button';
          dropdownButton.className = 'size-dropdown-button';
          dropdownButton.innerHTML = `
            <span class="selected-size">Choose your size</span>
            <svg class="dropdown-arrow" width="16" height="16" viewBox="0 0 16 16" fill="none">
              <path d="M4 6L8 10L12 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          `;
          
          const dropdownOptions = document.createElement('div');
          dropdownOptions.className = 'size-dropdown-options';
          
          option.values.forEach(value => {
            const optionElement = document.createElement('button');
            optionElement.type = 'button';
            optionElement.className = 'size-option';
            optionElement.textContent = value;
            optionElement.addEventListener('click', () => {
              dropdownButton.querySelector('.selected-size').textContent = value;
              // Remove the selected class application that was causing the black styling
              dropdownOptions.querySelectorAll('.size-option').forEach(opt => opt.classList.remove('selected'));
              // Don't add selected class to keep it white with only hover effect
              dropdownContainer.classList.remove('open');
              updateVariant(originalIndex, value);
            });
            
            dropdownOptions.appendChild(optionElement);
          });
          
          dropdownButton.addEventListener('click', () => {
            dropdownContainer.classList.toggle('open');
            document.querySelectorAll('.size-dropdown-container.open').forEach(container => {
              if (container !== dropdownContainer) {
                container.classList.remove('open');
              }
            });
          });
          
          dropdownContainer.appendChild(dropdownButton);
          dropdownContainer.appendChild(dropdownOptions);
          variantGroup.appendChild(dropdownContainer);
        } else {
          const optionsContainer = document.createElement('div');
          optionsContainer.className = 'variant-options';
          
          option.values.forEach(value => {
            const button = document.createElement('button');
            button.type = 'button';
            button.className = 'variant-option';
            
            if (option.name.toLowerCase() === 'color' || option.name.toLowerCase() === 'colour') {
              const colorDot = document.createElement('span');
              colorDot.className = 'variant-color-dot';
              const detectedColor = getVariantColor(value);
              colorDot.style.backgroundColor = detectedColor;
              
              if (value.toLowerCase() === 'white' || value.toLowerCase() === 'cream' || 
                  value.toLowerCase() === 'ivory' || value.toLowerCase() === 'beige') {
                colorDot.style.border = '1px solid #ddd';
              }
              
              button.appendChild(colorDot);
            }
            
            const textSpan = document.createElement('span');
            textSpan.textContent = value;
            button.appendChild(textSpan);
            
            button.addEventListener('click', () => {
              optionsContainer.querySelectorAll('.variant-option').forEach(btn => {
                btn.classList.remove('selected');
              });
              button.classList.add('selected');
              updateVariant(originalIndex, value);
            });
            
            if (value === option.values[0]) {
              button.classList.add('selected');
            }
            
            optionsContainer.appendChild(button);
          });
          
          variantGroup.appendChild(optionsContainer);
        }
        
        container.appendChild(variantGroup);
      });
    }

    function updateVariant(optionIndex, value) {
      const selections = [];
      currentProduct.options.forEach((option, index) => {
        if (index === optionIndex) {
          selections[index] = value;
        } else if (option.name.toLowerCase() === 'size') {
          const sizeButton = document.querySelector('.size-dropdown-button .selected-size');
          const selectedText = sizeButton ? sizeButton.textContent : '';
          selections[index] = selectedText !== 'Choose your size' ? selectedText : '';
        } else {
          const variantGroups = document.querySelectorAll('#variantOptions .variant-group');
          if (variantGroups[index]) {
            const selected = variantGroups[index].querySelector('.variant-option.selected');
            if (selected) {
              const textSpan = selected.querySelector('span:last-child') || selected;
              selections[index] = textSpan.textContent.trim();
            } else {
              selections[index] = option.values[0];
            }
          }
        }
      });

      selectedVariant = currentProduct.variants.find(variant => {
        return selections.every((selection, index) => {
          const variantOption = variant[`option${index + 1}`];
          return !selection || variantOption === selection;
        });
      });

      if (!selectedVariant) {
        selectedVariant = currentProduct.variants[0];
      }

      updatePrice();
      updateAddToCartButton();
    }

    function updateAddToCartButton() {
      const button = document.getElementById('addToCartBtn');
      if (selectedVariant && selectedVariant.available) {
        button.disabled = false;
        button.querySelector('span').textContent = 'ADD TO CART';
      } else {
        button.disabled = true;
        button.querySelector('span').textContent = 'SOLD OUT';
      }
    }

    function formatMoney(cents) {
      return (cents / 100).toFixed(2) + '€';
    }

    // Add to cart functionality
    document.getElementById('addToCartForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!selectedVariant || !selectedVariant.available) return;

      const button = document.getElementById('addToCartBtn');
      const originalText = button.querySelector('span').textContent;
      
      button.classList.add('loading');
      button.querySelector('span').textContent = 'ADDING...';
      button.disabled = true;

      try {
        await addToCart(selectedVariant.id, 1);
        
        const needsJacket = checkForAutomaticJacket();
        if (needsJacket) {
          await addSoftWinterJacket();
        }
        
        button.querySelector('span').textContent = 'ADDED!';
        setTimeout(() => {
          closeQuickView();
        }, 1000);
        
      } catch (error) {
        console.error('Error adding to cart:', error);
        button.querySelector('span').textContent = 'ERROR';
        setTimeout(() => {
          button.querySelector('span').textContent = originalText;
          button.disabled = false;
        }, 2000);
      } finally {
        button.classList.remove('loading');
      }
    });

    function checkForAutomaticJacket() {
      const hasBlack = selectedVariant.option1 === 'Black' || selectedVariant.option2 === 'Black' || selectedVariant.option3 === 'Black';
      const hasMedium = selectedVariant.option1 === 'Medium' || selectedVariant.option2 === 'Medium' || selectedVariant.option3 === 'Medium';
      return hasBlack && hasMedium;
    }

    async function addSoftWinterJacket() {
      const jacketVariantId = 'YOUR_JACKET_VARIANT_ID_HERE';
      try {
        await addToCart(jacketVariantId, 1);
        console.log('Soft Winter Jacket added automatically');
      } catch (error) {
        console.error('Failed to add Soft Winter Jacket:', error);
      }
    }

    async function addToCart(variantId, quantity) {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: variantId,
          quantity: quantity
        })
      });

      if (!response.ok) {
        throw new Error('Failed to add to cart');
      }

      return response.json();
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
      const openDropdown = document.querySelector('.size-dropdown-container.open');
      if (openDropdown && !openDropdown.contains(e.target)) {
        openDropdown.classList.remove('open');
      }
    });

    // Close modal when clicking outside
    document.getElementById('quickViewModal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeQuickView();
      }
    });

    // Close modal with escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        closeQuickView();
      }
    });
  </script>
</div>

{% schema %}
{
  "name": "Quick View",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Section Heading",
      "default": "Featured Products"
    },
    {
      "type": "textarea",
      "id": "subheading",
      "label": "Section Subheading",
      "info": "Optional description text below the heading"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection",
      "info": "Select the collection to display products from"
    }
  ],
  "presets": [
    {
      "name": "Product Grid with Quick View",
      "settings": {
        "heading": "Featured Products",
        "subheading": "Discover our curated selection of premium products"
      }
    }
  ]
}
{% endschema%}